[{"content":"2021年9月30日 Let\u0026rsquo;s Encrypt的DST Root CA X3 证书过期了。\n给我的实际影响是 使用 https://gems.ruby-china.com 没办法安装gem，会报ssl错误。\n如果你是openssl 1.1.0 不会遇到这个问题，但centos 7 (我的版本是7.3.1611) 默认安装的是 openssl 1.0.2。\n如果机器少，你可以根据 openssl 的博客 手动修改证书。\n但我的机器多，手动修改证书也很怕出错，所以可以执行下面的命令\nyum update -y ca-certificates \u0026amp;\u0026amp; update-ca-trust 至少需要升级到 2021.2.50-72 版本，其实原理是一样的，只是ca-certificates 在2020-06-09的版本移除了DST Root CA X3\n","permalink":"https://blog.xuxiangyang.com/posts/%E8%BF%90%E7%BB%B4/centos-7-%E8%A7%A3%E5%86%B3-dst-root-ca-x3-%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/","summary":"2021年9月30日 Let\u0026rsquo;s Encrypt的DST Root CA X3 证书过期了。\n给我的实际影响是 使用 https://gems.ruby-china.com 没办法安装gem，会报ssl错误。\n如果你是openssl 1.1.0 不会遇到这个问题，但centos 7 (我的版本是7.3.1611) 默认安装的是 openssl 1.0.2。\n如果机器少，你可以根据 openssl 的博客 手动修改证书。\n但我的机器多，手动修改证书也很怕出错，所以可以执行下面的命令\nyum update -y ca-certificates \u0026amp;\u0026amp; update-ca-trust 至少需要升级到 2021.2.50-72 版本，其实原理是一样的，只是ca-certificates 在2020-06-09的版本移除了DST Root CA X3","title":"Centos 7 解决 DST Root CA X3 过期问题"},{"content":"方案整体思路 我希望能够通过Arduino来接收感应器和控制舵机等，RaspberryPI来控制网络业务等复杂交互逻辑。Arduino就像一个超级设备，对上层业务隐藏硬件控制细节。所以 Arduino会通过USB链接到RaspberryPI，由RaspberryPI负责Arduino供电。RaspberryPI部分使用Python来做业务代码，通过Serial于Arduino交互。\n环境安装   安装Arduino IDE环境\nsudo apt-get install arduino   允许 pi 访问USB和串口，这里假设你的账户名称为 pi\nsudo usermod -a -G dialout pi   使用Python3环境安装pySerial库\npython3 -m pip install pyserial   从Arduino读取数据 我们需要编写2个设备上的代码\n  编写Arduino代码\nvoid setup() { Serial.begin(9600); } void loop() { Serial.println(\u0026#34;Hello\u0026#34;); delay(1000); }   点击Arduino IDE UpLoad，通过 Serial Monitor 应该可以看到 Hello 的输出\n  编写Python代码\nimport serial if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.Serial(\u0026#39;/dev/ttyUSB0\u0026#39;, 9600, timeout=1) ser.flush() while True: if ser.in_waiting \u0026gt; 0: line = ser.readline().decode(\u0026#39;utf-8\u0026#39;).rstrip() print(line) 运行代码，注意这里要关闭上一步开启的 Serial Monitor 。就可以看到Hello的输出了\n  控制Arduino LED 闪烁   编写Arduino代码后Upload\n#define LED_PIN 13  void setup() { Serial.begin(9600); pinMode(LED_PIN, OUTPUT); digitalWrite(LED_PIN, LOW); } void loop() { if(Serial.available() == 0) return; String cmd = Serial.readStringUntil(\u0026#39;\\n\u0026#39;); if(cmd == \u0026#34;on\u0026#34;) { digitalWrite(LED_PIN, HIGH); } else if(cmd == \u0026#34;off\u0026#34;) { digitalWrite(LED_PIN, LOW); } }   编写Python代码\nimport serial import time if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.Serial(\u0026#39;/dev/ttyUSB0\u0026#39;, 9600, timeout=1) ser.flush() while True: ser.write(b\u0026#34;on\\n\u0026#34;) time.sleep(1) ser.write(b\u0026#34;off\\n\u0026#34;) time.sleep(1) 运行代码，此时Arduino板子上的LED应该就开始闪烁了，如果你的Arduino板子上没有内置LED，那么接一个LED在13 pin口上即可。\n  控制的同时从Arduino读取数据   编写Arduino代码后Upload\n#define LED_PIN 13  void setup() { Serial.begin(9600); pinMode(LED_PIN, OUTPUT); digitalWrite(LED_PIN, LOW); } void loop() { if(Serial.available() == 0) return; String cmd = Serial.readStringUntil(\u0026#39;\\n\u0026#39;); if(cmd == \u0026#34;on\u0026#34;) { digitalWrite(LED_PIN, HIGH); Serial.println(\u0026#34;led on\u0026#34;); } else if(cmd == \u0026#34;off\u0026#34;) { digitalWrite(LED_PIN, LOW); Serial.println(\u0026#34;led off\u0026#34;); } }   编写Python代码\nimport serial import time if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.Serial(\u0026#39;/dev/ttyUSB0\u0026#39;, 9600, timeout=1) ser.flush() while True: ser.write(b\u0026#34;on\\n\u0026#34;) line = ser.readline().decode(\u0026#39;utf-8\u0026#39;).rstrip() print(line) time.sleep(1) ser.write(b\u0026#34;off\\n\u0026#34;) line = ser.readline().decode(\u0026#39;utf-8\u0026#39;).rstrip() print(line) time.sleep(1) 运行代码，此时Arduino板子上的LED应该就开始闪烁了，并且python应该交替的出现 led on 和 led off\n  为什么不用RaspberryPI直接操作硬件  我自己手头正好有一个Arduino和一个树莓派。以前接触过Arduino觉得也很简单，用起来也很容易。所以如果你只有一个树莓派，我不认为在没有明确的可衡量的理由时采用这套方案 我的树莓派希望做的事情会更多些，更多的会是家庭的服务器用途，所以我不希望在树莓派上插好多线来充当DIY环节的一部分，我希望树莓派是Arduino功能的补充，比如网络控制等。  最后 多折腾折腾\n","permalink":"https://blog.xuxiangyang.com/posts/diy/%E5%A6%82%E4%BD%95%E7%94%A8raspberrypi%E6%8E%A7%E5%88%B6arduino/","summary":"方案整体思路 我希望能够通过Arduino来接收感应器和控制舵机等，RaspberryPI来控制网络业务等复杂交互逻辑。Arduino就像一个超级设备，对上层业务隐藏硬件控制细节。所以 Arduino会通过USB链接到RaspberryPI，由RaspberryPI负责Arduino供电。RaspberryPI部分使用Python来做业务代码，通过Serial于Arduino交互。\n环境安装   安装Arduino IDE环境\nsudo apt-get install arduino   允许 pi 访问USB和串口，这里假设你的账户名称为 pi\nsudo usermod -a -G dialout pi   使用Python3环境安装pySerial库\npython3 -m pip install pyserial   从Arduino读取数据 我们需要编写2个设备上的代码\n  编写Arduino代码\nvoid setup() { Serial.begin(9600); } void loop() { Serial.println(\u0026#34;Hello\u0026#34;); delay(1000); }   点击Arduino IDE UpLoad，通过 Serial Monitor 应该可以看到 Hello 的输出\n  编写Python代码\nimport serial if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.","title":"如何用RaspberryPI控制Arduino"},{"content":"为什么使用Org而不直接使用Github Pages Markdown  我是Emacs用户，使用Spacemacs，日常开发工作主要使用这个工具，并且Spacemacs对于Org支持度很好 Org 基本语法表达能力不弱于标准 Markdown。 Org Capture + Agenda Views 可以实现我想在任意的Emacs窗口随时管理我的 TODO、笔记等，自然的我希望博客也可以在这套体系下，关于这套多提。关于这套多提几句，它主要可以实现我如下模型  在任意的Emacs任意界面随时记录和查看TODO，随意记录后Emacs会自动帮你汇总，这样可以最大限度的降低工作中的打扰 Capture 可以自定义Template，可以满足我在不同场景下预制结构 用Capture和直接自己去编辑各个org文件是非常不同的感受，你永远不用操心写到一半的东西要保存到哪里，如果找到你写了一半的东西   我希望能有更多的控制，并且这些控制能充分利用前人经验，Github Page只是暂时的一个方案，它满足目前需求（毕竟我还没有写博客，我希望自己能定期有至少一次的深入思考），但灵活性就会有所下降，我不希望未来整个网站和Github必须绑死。  如何选取 Org 博客方案 我参考了 Blogs and Wikis with Org 最终选择了 ox-hugo ，主要考虑了如下几点：\n 有丰富主题可供选择，我希望找一个简单的但是还算是有过设计的主题 使用的人要多，而且仍要在维护，这样踩坑就少 文档丰富，使用起来简单  基于以上几点过滤完，其实剩下的考虑就是在 Jekyll 和 Hugo 间了，因为以前听说过Hugo，所以就随意选择了Hugo方向了。通过尝试原生 org 感觉起来支持度不能满足我需求，并且没有如何天然配合Capture使用，所以 ox-hugo 就成了最终方案。当然，事实证明 ox-hugo 就恰恰是我想要的\n如何搭建起整个博客   在Spacemacs中添加 org layer，并且启用 org-enable-hugo-support 之后重启Spacemacs\n(defun dotspacemacs/layers () (setq-default dotspacemacs-configuration-layers \u0026#39;( (org :variables org-enable-github-support t ) ) ) )   安装 Hugo，已Mac为例\nbrew install hugo   使用Hugo创建博客地址，假设创建在 ~/blog 目录下\nhugo new site blog   [可选] 根据上一步命令行输出可以配置 Theme 等信息\n  为 Org Capture 增加 Blog 模板\n  ox-hugo 默认支持2中模式 One post per Org subtree 和 One post per Org file ，我选择了 One post per Org subtree 这样我的配置不需要各个文件都去配置，并且这样配置的 Capture 模板更简单些。Org本身的Subtree设计能够让我专注在某一篇文章中，并且暂时我的文章数肯定不会多到在同一个文件中出现什么性能问题，所以这个模式目前是合理的。\n  我的 org 目录在 ~/org 下，我希望 blog 的 Org 文件和其他任务、笔记等隔离，创建了 ~/org/blog.org 文件来专门做博客，添加如下开头\n#+HUGO_BASE_DIR: ~/blog #+HUGO_SECTION: posts   为Captrue增加Blog模板\n(defun dotspacemacs/user-config () (with-eval-after-load \u0026#39;org-capture (defun org-hugo-new-subtree-post-capture-template () \u0026#34;Returns `org-capture\u0026#39;template string for new Hugo post. See `org-capture-templates\u0026#39;for more information.\u0026#34; (let* ((title (read-from-minibuffer \u0026#34;Title: \u0026#34;)) ;Prompt to enter the post title (fname (org-hugo-slug title))) (mapconcat #\u0026#39;identity `( ,(concat \u0026#34;* TODO \u0026#34; title) \u0026#34;:PROPERTIES:\u0026#34; ,(concat \u0026#34;:EXPORT_FILE_NAME: \u0026#34; fname) \u0026#34;:END:\u0026#34; \u0026#34;%?\\n\u0026#34;) ;Place the cursor here finally \u0026#34;\\n\u0026#34;))) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;b\u0026#34; ;`org-capture\u0026#39; binding + h \u0026#34;Blog\u0026#34; entry ;; It is assumed that below file is present in `org-directory\u0026#39; ;; and that it has a \u0026#34;Blog Ideas\u0026#34; heading. It can even be a ;; symlink pointing to the actual location of notes.org! (file \u0026#34;blog.org\u0026#34;) (function org-hugo-new-subtree-post-capture-template))) ) )     尝试使用 Org Capture 写一篇文章，最终有一篇文章的Org文件内容如下\n#+HUGO_BASE_DIR: ~/blog #+HUGO_SECTION: posts ​* TODO Test :PROPERTIES: :EXPORT_FILE_NAME: test :EXPORT_HUGO_BUNDLE: org :EXPORT_HUGO_TAGS: test :EXPORT_HUGO_CATEGORIES: org :END: ** 二级标题 里面有一些propertie的意思如下\n #+HUGO_BASE_DIR 这个是对所有文章都生效的配置，指出 blog 这个 Hugo 项目的Path EXPORT_FILE_NAME 这个是文章mardown的文件名 EXPORT_HUGO_BUNDLE 这个是文章所在的子目录，我希望不同 CATEGORIE 的文章可以按子目录划分 EXPORT_HUGO_TAGS 文章标签，可以支持多个 EXPORT_HUGO_CATEGORIES 文章类型，也支持多个，但是我希望一个文章属于一个类型，有多个标签  上面的配置实际效果将是导出的 markdown 将存储在 ~/blog/content/posts/org/test.md 上，最终文章的URL将是 {HUGO_HOST}/posts/org/test\n  写作完成后要把 Test 处的 TODO ，通过 C-c C-c 标记为 DONE ，否则会认为这个文章为 草稿 状态，Hugo 不显示\n  在 Org 文件中 Test 文章 SubTree 执行导出 , e e H H\n  进入 blog 目录，执行 hugo server 就可以看到效果了\n  进行到上述步骤 Org 和 Hugo之间的交互就通了，下面讲展示如何使用 GitHub Pages 显示 Hugo 编译出的内容，参考的是 Hugo Host on Github\n  在Github 创建 你用户名的 repository，已我自己举例，我创建了一个 xuxiangyang.github.io 的项目，这个项目需要是Public（否则开通Page需要额外付费）\n  进入Blog项目，添加 .github/workflows/gh-pages.yml 文件，用Github Action 自动生成博客\nname: github pages on: push: branches: ​ - main  # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: ​ - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public   为 Blog 项目添加Git托管\ngit init git add . git commit -m \u0026#39;commit with first test post\u0026#39; git branch -M main git remote add origin git@github.com:xuxiangyang/test.git git push -u origin main   在Github看这个项目的Actions，等待Action运行成功，这个Action的原理是利用 main 分支的 Hugo 源码，编译成HTML静态文件，合并到=gh-pages=分支\n  在Github上 Settings -\u0026gt; Pages，修改 Source Branch为 gh-pages\n  等待一段时间应该就可以了\n    ","permalink":"https://blog.xuxiangyang.com/posts/org/ox-hugo/","summary":"为什么使用Org而不直接使用Github Pages Markdown  我是Emacs用户，使用Spacemacs，日常开发工作主要使用这个工具，并且Spacemacs对于Org支持度很好 Org 基本语法表达能力不弱于标准 Markdown。 Org Capture + Agenda Views 可以实现我想在任意的Emacs窗口随时管理我的 TODO、笔记等，自然的我希望博客也可以在这套体系下，关于这套多提。关于这套多提几句，它主要可以实现我如下模型  在任意的Emacs任意界面随时记录和查看TODO，随意记录后Emacs会自动帮你汇总，这样可以最大限度的降低工作中的打扰 Capture 可以自定义Template，可以满足我在不同场景下预制结构 用Capture和直接自己去编辑各个org文件是非常不同的感受，你永远不用操心写到一半的东西要保存到哪里，如果找到你写了一半的东西   我希望能有更多的控制，并且这些控制能充分利用前人经验，Github Page只是暂时的一个方案，它满足目前需求（毕竟我还没有写博客，我希望自己能定期有至少一次的深入思考），但灵活性就会有所下降，我不希望未来整个网站和Github必须绑死。  如何选取 Org 博客方案 我参考了 Blogs and Wikis with Org 最终选择了 ox-hugo ，主要考虑了如下几点：\n 有丰富主题可供选择，我希望找一个简单的但是还算是有过设计的主题 使用的人要多，而且仍要在维护，这样踩坑就少 文档丰富，使用起来简单  基于以上几点过滤完，其实剩下的考虑就是在 Jekyll 和 Hugo 间了，因为以前听说过Hugo，所以就随意选择了Hugo方向了。通过尝试原生 org 感觉起来支持度不能满足我需求，并且没有如何天然配合Capture使用，所以 ox-hugo 就成了最终方案。当然，事实证明 ox-hugo 就恰恰是我想要的\n如何搭建起整个博客   在Spacemacs中添加 org layer，并且启用 org-enable-hugo-support 之后重启Spacemacs\n(defun dotspacemacs/layers () (setq-default dotspacemacs-configuration-layers \u0026#39;( (org :variables org-enable-github-support t ) ) ) )   安装 Hugo，已Mac为例","title":"使用Org写博客"}]