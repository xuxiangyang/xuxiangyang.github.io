[{"content":"写在前面的话 原书地址 。笔记是以原书目录为结构，每章节的总结。\n读完这本书最大的感受就是：\n 你自己的事业在业余时间足够了，它不需要很大，只需要能养活自己就好了。 有想法立刻动手做，因为是个小生意，所以不用决定太久以后的事情 不是所有生意都需要融资，你可以为你现在面临的问题做一个产品 关注在生意本身，生意就是要赚钱。 一个事情值得花多少时间？不要一味的投入时间，考虑下真的值得这么多时间吗？ 不要雇人做你自己没有尝试过的工作。  TAKEDOWNS Ignore the real world \u0026ldquo;这个东西现实中肯定行不通\u0026rdquo;，不要管这种想法。 每周10-40个小时的工作你就能验证就足够验证你的想法了，你完全可以在从事你日常工作的同时开展一个副业。 真实世界不是一个地方，通常是你不去尝试的一个借口。\nLearning from mistakes is overrated。从错误中学习被高估了 别人的失败只是别人的失败，与你无关。 常见的误解是你需要从失败中中学习，但你真正能学到什么？你可能学到的是如果再做一次，不要做什么，但是这个真的有什么价值吗？你仍然不知道应该做什么。 失败不是成功之母，进化论不是停留在过去的失败上的，他是沿着可行的事情进化的。\nPlanning is guessing 长期的商业计划是玄幻的，因为有太多不受你控制的因素影响。如果把计划称为猜测（计划的本质），就没有那么大压力了。 Plan 是 让过去驱动未来，会蒙蔽你。 不是说你不应该思考未来或者盘算可能遇到的障碍。做这些是很有价值的训练。只是不觉得你必须写下它来，对它念念不忘。 决定你这周要做什么，而不是今年要做什么。找出接下来组重要的事情然后去做。\nWhy grow? 公司多少人合适？人多对比人少除了能带来自大以外还有什么呢？公司规模的扩大不应该是目标。 不被担心致力于成就一个小商业。任何一个有用可持续的盈利的商业，不管大小，都是值得自豪的。\nWorkaholism 工作狂 沉迷工作是思维上的懒惰，甚至可能引发危机 如果你所有的是事情就是工作，那么你就不能作出合理的判断了。 工作狂不是英雄，因为他们没有节省时间，真正的英雄已经回家了，因为他找到了完成事情的更快的方式\nEnough with \u0026ldquo;entrepreneurs\u0026rdquo; 企业家已经够多的了 企业家这个名字压力太大了，每一个开启新商务的人不防都叫做开启者。你不需要有什么自立，只是需要一个idea、一点信心、一个开始的动力。\nGO Make a dent in the universe 在世界中留一点印记 Scratch your own itch 搔你自己的痒 解决你自己实际遇到的问题是最容易的。\nStart making something No time is no excuse 没时间只是借口 Draw a line in the sand 在做事时，记住你为什么做这件事。\nMission statement impossible 支持某种事情不是写下来，而是相信它，依赖它\nOutside money is Plan Z 从外面筹集资金是备选方案，因为这样会给你上枷锁 放弃了控制：如果去外部筹集资金，你也需要满足他们。他们通常会希望在3-5年内回笼资金。 花别人的钱上瘾：越花别人的钱，别人控制你的公司会越来越多 通常是个坏注意：刚开始时，你没有影响力。对于进入任何财务交易的坏时间。 最终你会构造一个投资者想要的，而不是顾客想要的 融资是很让人分心的：需要花费几个月的会议、法律操作、签约等 总之，不值得。\nYou need less than you think Start a business, not a startup startup 是一种获得广泛关注的特殊的公司。 startup 是一个神器的地方，在这个地方损失是别人的、烦人的税收问题永远不是个问题、在你找到一个赚钱的方式前花别人的钱、商业基础理论不适用。 这个神器的地方的问题是它只在童话故事里。真相是每一个不论新老的商业都被同样地市场力量和经济规律支配。收入支出，要么盈利要么消失。\nBuilding to flip is building to flop 一个经常听到的话是这样的“你的退出策略是什么？”，甚至会在刚开始启动时听到。急什么？如果你在还没有进入前就来思考退出，你优先要处理的事就乱了。 你需要的是一个承诺策略，而不是一个退出策略。你应该思考什么东西可以让你的项目发展壮大，而不是你如何弃船潜逃。 如果你出于被收购的目的成立一家公司，那你就强调了错误的事情。你不再关注顾客是否爱你的产品，而是关心哪些要收购你的人。这明显是错的。 假设你忽略这些建议成立了一个公司，成了了个公司，卖掉了它，获取了丰厚的报酬。然后呢？搬到一个岛上，整天小酌？这个真的能让你高兴吗？钱本身真的能让你高兴吗？ 如果你真的设法得到了一个好东西，坚持到底。好东西不是经常出现的，不要让你的生意消失。\nLess mass 小规模。规模越大调整越难。\nProgress Embrace constraints 拥抱限制 Build half a product, not a half-assed product 牺牲你理想中的一部分来成就一个更好的。最好是交付一个非常好的一半的功能，而不是一个组装了一半的全部功能。\nStart at the epicenter 从中心开始。当你开始一个新的事情时，例如你打算开一个热狗摊，第一件事情是关心热狗，而不是调味品、小推车、名字等等。热狗才是中心，其余的是次要的。 找到中心的方法就是你问自己如果拿掉这个，是不是依然成立。\nIgnore the details early on 先完成基本的，再来关心细节。\nMaking the call is making progress 不要 “来想想这件事吧”，而是要 “来决定这件事吧”。不要等着完美的解决方案，决定下来，然后开始做。\nBe a curator Throw less at the problem Focus on what won\u0026rsquo;t change 你的商业核心应该围绕着不会改变的事情构建。人们今天需要，十年后也需要。\nTone is in your fingers 音色在你手上 工具不重要，重要的是在生意中真正起作用的东西。\nSell your by-products 当你制造某个东西是，你也会同时制造出些别的东西。不可能只制作出一个的东西，每个东西都有一些副产品。 每一个副产品需要你仔细的审视、思考发现它的商业价值，否则就是一种浪费。\nLaunch now 一旦你的产品实现了它该实现的，立刻发布。 给定一个截至日期，移除任何发布不是必须的，只构建必需品，其余的靠后。\nProductivity Illusions of agreement 一致性的假象 100个人看到同样的话，在他们脑子里会有100个不同的东西。 不要尝试只通过文档描述让大家都能明白。如果你想让人看到什么，画出来；想让人听到什么，哼出来。不要依赖文档，用更实际的方法。 放弃抽象，拿出\u0026quot;凿子\u0026quot;，构造一些真实的东西。\nReasons to quit 低头做你认为应该做完的事情是容易的，但是抬起头思考为什么是难的。下面是一些为了确保你在做紧要的事情，你需要自己问自己的一些重要问题：\n 你为什么做这个？ 你在解决什么问题？你是不是在解决一个想象中的问题？ 你是在创造价值吗？ 这个会影响用户行为吗？除非某个事情真的对用户使用你产品的方式有重大影响，否则不要增加它。 是否有更简单的方式？ 你还能做什么？有哪些事情是你因为这个事情不能做的？考虑下优先级。 这件事真的值得吗？  Interruption is the enemy of productivity 中断是效率的敌人 Meetings are toxic 会议有毒 Good enough is fine 如果足够好就能完成这个工作，就这么做了。记住，之后你通常能把足够好变为伟大。\nQuick wins 短期能预见的提升有助于动力的保持。很小的提升可以给你巨大的推力。 一个事需要的时间越久，你越不可能完成它。 要有持续的短期的胜利。\nDont\u0026rsquo;t be a hero 当你已经对一个事情投入了超过它值得的时间，不要再一味的投入时间精力，妄图做一个英雄。 假设超过了预计的时间，应该停下来看看这个事情是否真的值得，有没有其他路径？是不是走错路？ 不要忘记了，超过预计时间后放弃也是一个选择。你不可能弥补损失的时间，单最坏的事情是你继续浪费时间\nGo to sleep 放弃睡觉是个坏想法。虽然你可以立刻得到额外的时间，但是你随后会付出代价的：你损失了创造力、士气、态度。 在你理解后果的情况下，你还是偶尔可以熬夜通宵。但是不要成为习惯。如果经常这样，会有如下的代价：\n Stubbornness：固执。当你真的累了，你更容易不重新思考下路径，而是沿着偶然间找到的错误的路深耕进去。 Lack of creativity：缺乏创造力。十倍效能的人不是比普通人十倍的努力，而是他们利用创造力找到了只需要十分之一努力的方案。 Diminished morale：削弱士气。 Irritability：易怒。当你很疲惫时，你的耐心和容忍度就会显著下降。  Your estimates suck 人类不擅长估算时间。把大的事情分解成小的事情，事情越小估算越容易。\nLong lists don\u0026rsquo;t get done 长的TODO很难完成，只会变成负罪感。总有一天，你会停止关注长TODO，因为它让你感觉很糟糕；然后你过渡紧张整个事情就成了一团乱麻。 更好地方式是把长TODO拆解成一系列的短TODO。每次关注一个短的TODO，虽然还是有这么多事情，但是你能看到进度，感到满意、有动力。 不要用数字来表示优先级，每次只要把最重要的事情排在最上面就好了。\nMake tiny decisions Competitors Don\u0026rsquo;t copy 抄袭的问题是你跳过了理解，而理解是你增长的方式。 如果你只是抄袭，你错过了理解什么生效为什么某个事情是那样，你只是重新利用了最后一层而没有理解地下的所有层面。\nDecommoditize your product 把你自己融入到产品中，别人很难抄袭。\nPick a fight Underdo your competition 传统观点认为你需要比你的对手多做一步。如果他们有4个功能，你需要5个。如果他们花了2万，你需要3万。如果他们有50个员工，你需要100个。 这种多做一步的冷战式思维是死路一条。 你需要比你的竞争对手做的少一点来打败他。解决简单的问题，把复杂的、困难的、丑陋的问题留给对手。 只做一些简单的事情并且做的足够好。\nWho cares what they\u0026rsquo;re doing? Evolution 进化 Say no by default 人们因为对抗会让他们不舒服，所以避免拒绝；但这是更坏的，你把事情拖出来，让事情更复杂，在你根本不相信的idea上工作。\nLet your customers outgrow you 当你过度的满足已有客户（甚至是单一的大客户）需求，你就变成了为已有的或者某一用户专门做了需求，但这个需求不能满足大部分人。你就失去了新增的动力。 outgrow 的含义是过大而不适合你。 当你允许你的客户过大不再适合你时，你很有可能有一个基础的但是很好的产品。小的、简单的、基础的需求是永恒的，有无穷无尽的客户需要这些。\nDon\u0026rsquo;t confuse enthusiasm with priority 不要混淆热情和优先级 Be at-home good 你要做一个实际用起来好的东西，而不是在商店里看着挺好的，想像起来也挺好的东西。\nDon\u0026rsquo;t write it down 好的需求会不断的重复出现，如果一个需求你总是忘，这表明它没有那么重要。真正重要的东西不会溜走。\nPromotion Welcome obscurity 默默无闻是最好的位置\nBuild an audience 所有的公司都有顾客，幸运的公司才有粉丝，但最幸运的公司有观众。读者可以成为你的秘密武器。 读者是那些会经常自主的来关注你说了什么的人。 通过演讲、写东西、博客、发动态、发视频来发布有价值的信息，你会逐渐的建立一个忠实的读者群体。\nOut-teach your competition 通过教你的顾客从竞争者中脱颖而出。 教导顾客是个体或小公司能做的但大公司不能做的。大公司能负得起春晚的广告，你付不起，但你能付的起教育。 大公司会过度沉迷于密码，这些领域需要过律师的审查然后通过层层审批才能发生。Teching是你能利用机动性胜过他们的地方。\nEmulate chefs 模仿主厨。为什么你知道少数的主厨，而不认识其他人。因为他们分享他们知道的一切，他们把食谱写进书里，在电视节目上展示才艺。 作为一个商人，你也应该分享你知道的所有事情。虽然有极少数东西真的是专有的且有竞争力的，但是绝大多数不是这样。 食谱应该是比商业好复制的多了，但是优秀的厨师为什么不担心？他把所有的菜谱写成书，上电视展示；因为他知道，这些菜谱和技巧在他的地盘不足以打败他。\nGo behind the scenes 给人们一个通往后台看看你的商业如何运行的渠道。人们热衷于发现所有商业背后的小秘密。 人们好奇东西是怎么造出来的。\nNobody likes plastic flowers 不要害怕展示你的缺陷，有缺陷是真实的，人们喜欢真实的。 削减到本质，但不要剥离它的韵，保持干净纯洁但不要剥夺生命力。 保留你制作的东西的韵味。当一个东西过于光鲜完美，它就损失了灵魂，更像一个机械\nPress releases are spam 新闻稿是垃圾 通常发新闻稿你是因为你希望被注意到。你希望记者注意你的新公司、产品、服务、公告等等。你希望他们对此感觉兴奋，然后为你写一个故事。 新闻稿是一个糟糕的方式，非常的枯燥刻版，没有任何可以让人兴奋的东西。 记者每天会看数十个这样的稿件，他们对大量的夸张新闻标题和CEO给的虚假报价已经厌倦了。 每个东西都打着轰动、突破、开创性、惊人的标签，这让人麻木了。\nForget about the Wall Street Journal 忘掉华尔街日报 大媒体你很难得到注意，找一个小众媒体会让障碍变小很多。 小众媒体实际上对于新鲜新闻是渴求的，他们希望成为引领风尚的人，找到新的事务，动起收来。 找一个精准的小众媒体会更好\nDrug dealers get it right 让你的商品足够好，给一点免费的，用户自然会回来付费。如果你担心人们不回来了，说明你的产品不够强壮。\nMarketing is not a department 市场不只是一个部门，它是你们公司每天在做的所有事情。\nThe myth of the overnight sensation 一夜成名的神话 一夜成名是不存在的，需要长时间的无人注意的努力。\nHiring Do it yourself first 不要为你自己没有尝试过的工作雇人。\nHire when it hurts 不要为了满足而雇佣，雇人来解决痛点。经常思考，如果我们不录用任何一个人呢？ 同理，当你损失一个人时，不要立刻替换他。\nPass on great people 不要在不需要的时候虚构一个岗位来招聘人，虚构的岗位需要做假需求，这样伤害更大\nStrangers at a cocktail party 快速的招大量的人，你会遇到鸡尾酒会陌生人问题，大家聊得都会没有意义的问题。每个人都是陌生的，充满了无尽的客气。大家都尽可能的避免冲突和争吵，没有人说这个注意糟透了，大家更倾向于平和而不是挑战。\nResumes are ridiculous 简历是荒谬的 简历是夸大的。 你应该真正的和他交流，而不是以来技能列表、动词、多年无关的经验。\nYears of irrelevance 多年的无关经验 五年工作经验的人只从经验上和1年的没有什么区别。关键在于个人的奉献能力、人格魅力、聪明智慧。 一个人做一件事情做了多久被过高评价了，重要的是他做这件事时做的有多好。\nForget about formal education Everybody works 小团队你需要每个人都工作，而不是委派工作，每个人都需要有产出。\nHire managers of one 这类人是有自己的目标并且会执行的人，他们不需要非常明确的目标、每日签到。他们做一个经历该做的事情：定下基调、分配项目、决定该做什么，但是他们自己为自己做这些。\nHire great writers 写作能力很重要。清晰的写作标志着清楚的思考，优秀的作者知道如何沟通。他们让事情跟容易理解，站在他人的角度来看问题，知道什么事情应该省略。\nThe best are everywhere 不要只是因为别人住的远就不雇佣最好的人。 远程工作要注意时区的问题，2-4个小时能够重叠的工作时间就足够了。至少没几个月要相互见面。\nTest-drive employees 当使用真实工作环境时，真相就出来了。看简历联系面试和真正与某人一起工作是两回事。\nDamage control Own your bad news 当问题出现后，即使的顾客没有注意到，告诉他们。不要认为你可以把它隐藏起来。\nSpeed changes everything How to say you\u0026rsquo;re sorry Put everyone on the front lines Take a deep breath Culture You don\u0026rsquo;t create a culture 速食文化是人造文化。你不能创作一个文化，它是自然发生的。文化是一贯的行为的副产品。\nDecisions are temporary 决策是短暂的 不要解决还没发生的问题。大部分你担心的东西永远不会发生。\n先着手于眼前事务，以后再考虑未来。\n改变方向的能力是小规模的优势。\nSkip the rock starts 环境比人们想象的有用的多。在一个摇滚明星般的环境中，你将释放每个人心中的明星力量。\n摇滚明星般的环境来源于信任、自治和负责，是给大家想要的私密、工作环境和工具造就的。\n良好的环境提现了对工作人员及其工作方式的尊重。\nThey\u0026rsquo;re not thirteen 雇员不是十三岁的孩子，过细的监控上完全是在浪费时间和金钱。\nSend people home at 5 5点让人们回家 你不需要更多的工作时间，而是需要更高效。\nDon\u0026rsquo;t scar on the first cut 一个人做错了一次事情，是不需要增加一个政策的；政策是为了那些不停出现的问题而设定的。\nSound like you 写东西时，重要的是交流，不要使用过于正式的单词，尝试着和人交流。\n写东西时，不要想着看你东西的所有人。就想象某一个人，你为某一个人写。\nFour-letter words 下面4个字母的单词是你不应该使用的。因为是使用了下面的词时，你就进入了一个非黒即白的世界，但是事实大部分情况不是绝对黑色和绝对白色的；人们感觉沮丧，问题就出现了。\n必须(need)：只有很少事情是必须做的，使用 或许、你认为这个怎么样、这个听起来怎么样、你觉得我们能够这样吗 这类词。\n不能(can\u0026rsquo;t)：当你说不能时，有可能是能的。有时甚至有对于“不能”的对抗。\n简单(Easy)：不要使用这个词描述别人的工作。\nASAP is poison 尽快是毒药 如果所有事情都是高优先级的，就没有事情优先级高了。\nConclusion Inspiration is perishable 灵感是短暂的 有灵感时就赶紧去做。\n","permalink":"https://blog.xuxiangyang.com/posts/%E4%B9%A6%E7%B1%8D/rework-read-note/","summary":"写在前面的话 原书地址 。笔记是以原书目录为结构，每章节的总结。\n读完这本书最大的感受就是：\n 你自己的事业在业余时间足够了，它不需要很大，只需要能养活自己就好了。 有想法立刻动手做，因为是个小生意，所以不用决定太久以后的事情 不是所有生意都需要融资，你可以为你现在面临的问题做一个产品 关注在生意本身，生意就是要赚钱。 一个事情值得花多少时间？不要一味的投入时间，考虑下真的值得这么多时间吗？ 不要雇人做你自己没有尝试过的工作。  TAKEDOWNS Ignore the real world \u0026ldquo;这个东西现实中肯定行不通\u0026rdquo;，不要管这种想法。 每周10-40个小时的工作你就能验证就足够验证你的想法了，你完全可以在从事你日常工作的同时开展一个副业。 真实世界不是一个地方，通常是你不去尝试的一个借口。\nLearning from mistakes is overrated。从错误中学习被高估了 别人的失败只是别人的失败，与你无关。 常见的误解是你需要从失败中中学习，但你真正能学到什么？你可能学到的是如果再做一次，不要做什么，但是这个真的有什么价值吗？你仍然不知道应该做什么。 失败不是成功之母，进化论不是停留在过去的失败上的，他是沿着可行的事情进化的。\nPlanning is guessing 长期的商业计划是玄幻的，因为有太多不受你控制的因素影响。如果把计划称为猜测（计划的本质），就没有那么大压力了。 Plan 是 让过去驱动未来，会蒙蔽你。 不是说你不应该思考未来或者盘算可能遇到的障碍。做这些是很有价值的训练。只是不觉得你必须写下它来，对它念念不忘。 决定你这周要做什么，而不是今年要做什么。找出接下来组重要的事情然后去做。\nWhy grow? 公司多少人合适？人多对比人少除了能带来自大以外还有什么呢？公司规模的扩大不应该是目标。 不被担心致力于成就一个小商业。任何一个有用可持续的盈利的商业，不管大小，都是值得自豪的。\nWorkaholism 工作狂 沉迷工作是思维上的懒惰，甚至可能引发危机 如果你所有的是事情就是工作，那么你就不能作出合理的判断了。 工作狂不是英雄，因为他们没有节省时间，真正的英雄已经回家了，因为他找到了完成事情的更快的方式\nEnough with \u0026ldquo;entrepreneurs\u0026rdquo; 企业家已经够多的了 企业家这个名字压力太大了，每一个开启新商务的人不防都叫做开启者。你不需要有什么自立，只是需要一个idea、一点信心、一个开始的动力。\nGO Make a dent in the universe 在世界中留一点印记 Scratch your own itch 搔你自己的痒 解决你自己实际遇到的问题是最容易的。\nStart making something No time is no excuse 没时间只是借口 Draw a line in the sand 在做事时，记住你为什么做这件事。","title":"《Rework》阅读笔记"},{"content":"2021年9月30日 Let\u0026rsquo;s Encrypt的DST Root CA X3 证书过期了。\n给我的实际影响是 使用 https://gems.ruby-china.com 没办法安装gem，会报ssl错误。\n如果你是openssl 1.1.0 不会遇到这个问题，但centos 7 (我的版本是7.3.1611) 默认安装的是 openssl 1.0.2。\n如果机器少，你可以根据 openssl 的博客 手动修改证书。\n但我的机器多，手动修改证书也很怕出错，所以可以执行下面的命令\nyum update -y ca-certificates \u0026amp;\u0026amp; update-ca-trust 至少需要升级到 2021.2.50-72 版本，其实原理是一样的，只是ca-certificates 在2020-06-09的版本移除了DST Root CA X3\n","permalink":"https://blog.xuxiangyang.com/posts/%E8%BF%90%E7%BB%B4/centos-7-%E8%A7%A3%E5%86%B3-dst-root-ca-x3-%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/","summary":"2021年9月30日 Let\u0026rsquo;s Encrypt的DST Root CA X3 证书过期了。\n给我的实际影响是 使用 https://gems.ruby-china.com 没办法安装gem，会报ssl错误。\n如果你是openssl 1.1.0 不会遇到这个问题，但centos 7 (我的版本是7.3.1611) 默认安装的是 openssl 1.0.2。\n如果机器少，你可以根据 openssl 的博客 手动修改证书。\n但我的机器多，手动修改证书也很怕出错，所以可以执行下面的命令\nyum update -y ca-certificates \u0026amp;\u0026amp; update-ca-trust 至少需要升级到 2021.2.50-72 版本，其实原理是一样的，只是ca-certificates 在2020-06-09的版本移除了DST Root CA X3","title":"Centos 7 解决 DST Root CA X3 过期问题"},{"content":"方案整体思路 我希望能够通过Arduino来接收感应器和控制舵机等，RaspberryPI来控制网络业务等复杂交互逻辑。Arduino就像一个超级设备，对上层业务隐藏硬件控制细节。所以 Arduino会通过USB链接到RaspberryPI，由RaspberryPI负责Arduino供电。RaspberryPI部分使用Python来做业务代码，通过Serial于Arduino交互。\n环境安装   安装Arduino IDE环境\nsudo apt-get install arduino   允许 pi 访问USB和串口，这里假设你的账户名称为 pi\nsudo usermod -a -G dialout pi   使用Python3环境安装pySerial库\npython3 -m pip install pyserial   从Arduino读取数据 我们需要编写2个设备上的代码\n  编写Arduino代码\nvoid setup() { Serial.begin(9600); } void loop() { Serial.println(\u0026#34;Hello\u0026#34;); delay(1000); }   点击Arduino IDE UpLoad，通过 Serial Monitor 应该可以看到 Hello 的输出\n  编写Python代码\nimport serial if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.Serial(\u0026#39;/dev/ttyUSB0\u0026#39;, 9600, timeout=1) ser.flush() while True: if ser.in_waiting \u0026gt; 0: line = ser.readline().decode(\u0026#39;utf-8\u0026#39;).rstrip() print(line) 运行代码，注意这里要关闭上一步开启的 Serial Monitor 。就可以看到Hello的输出了\n  控制Arduino LED 闪烁   编写Arduino代码后Upload\n#define LED_PIN 13  void setup() { Serial.begin(9600); pinMode(LED_PIN, OUTPUT); digitalWrite(LED_PIN, LOW); } void loop() { if(Serial.available() == 0) return; String cmd = Serial.readStringUntil(\u0026#39;\\n\u0026#39;); if(cmd == \u0026#34;on\u0026#34;) { digitalWrite(LED_PIN, HIGH); } else if(cmd == \u0026#34;off\u0026#34;) { digitalWrite(LED_PIN, LOW); } }   编写Python代码\nimport serial import time if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.Serial(\u0026#39;/dev/ttyUSB0\u0026#39;, 9600, timeout=1) ser.flush() while True: ser.write(b\u0026#34;on\\n\u0026#34;) time.sleep(1) ser.write(b\u0026#34;off\\n\u0026#34;) time.sleep(1) 运行代码，此时Arduino板子上的LED应该就开始闪烁了，如果你的Arduino板子上没有内置LED，那么接一个LED在13 pin口上即可。\n  控制的同时从Arduino读取数据   编写Arduino代码后Upload\n#define LED_PIN 13  void setup() { Serial.begin(9600); pinMode(LED_PIN, OUTPUT); digitalWrite(LED_PIN, LOW); } void loop() { if(Serial.available() == 0) return; String cmd = Serial.readStringUntil(\u0026#39;\\n\u0026#39;); if(cmd == \u0026#34;on\u0026#34;) { digitalWrite(LED_PIN, HIGH); Serial.println(\u0026#34;led on\u0026#34;); } else if(cmd == \u0026#34;off\u0026#34;) { digitalWrite(LED_PIN, LOW); Serial.println(\u0026#34;led off\u0026#34;); } }   编写Python代码\nimport serial import time if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.Serial(\u0026#39;/dev/ttyUSB0\u0026#39;, 9600, timeout=1) ser.flush() while True: ser.write(b\u0026#34;on\\n\u0026#34;) line = ser.readline().decode(\u0026#39;utf-8\u0026#39;).rstrip() print(line) time.sleep(1) ser.write(b\u0026#34;off\\n\u0026#34;) line = ser.readline().decode(\u0026#39;utf-8\u0026#39;).rstrip() print(line) time.sleep(1) 运行代码，此时Arduino板子上的LED应该就开始闪烁了，并且python应该交替的出现 led on 和 led off\n  为什么不用RaspberryPI直接操作硬件  我自己手头正好有一个Arduino和一个树莓派。以前接触过Arduino觉得也很简单，用起来也很容易。所以如果你只有一个树莓派，我不认为在没有明确的可衡量的理由时采用这套方案 我的树莓派希望做的事情会更多些，更多的会是家庭的服务器用途，所以我不希望在树莓派上插好多线来充当DIY环节的一部分，我希望树莓派是Arduino功能的补充，比如网络控制等。  最后 多折腾折腾\n","permalink":"https://blog.xuxiangyang.com/posts/diy/%E5%A6%82%E4%BD%95%E7%94%A8raspberrypi%E6%8E%A7%E5%88%B6arduino/","summary":"方案整体思路 我希望能够通过Arduino来接收感应器和控制舵机等，RaspberryPI来控制网络业务等复杂交互逻辑。Arduino就像一个超级设备，对上层业务隐藏硬件控制细节。所以 Arduino会通过USB链接到RaspberryPI，由RaspberryPI负责Arduino供电。RaspberryPI部分使用Python来做业务代码，通过Serial于Arduino交互。\n环境安装   安装Arduino IDE环境\nsudo apt-get install arduino   允许 pi 访问USB和串口，这里假设你的账户名称为 pi\nsudo usermod -a -G dialout pi   使用Python3环境安装pySerial库\npython3 -m pip install pyserial   从Arduino读取数据 我们需要编写2个设备上的代码\n  编写Arduino代码\nvoid setup() { Serial.begin(9600); } void loop() { Serial.println(\u0026#34;Hello\u0026#34;); delay(1000); }   点击Arduino IDE UpLoad，通过 Serial Monitor 应该可以看到 Hello 的输出\n  编写Python代码\nimport serial if __name__ == \u0026#39;__main__\u0026#39;: ser = serial.","title":"如何用RaspberryPI控制Arduino"},{"content":"为什么使用Org而不直接使用Github Pages Markdown  我是Emacs用户，使用Spacemacs，日常开发工作主要使用这个工具，并且Spacemacs对于Org支持度很好 Org 基本语法表达能力不弱于标准 Markdown。 Org Capture + Agenda Views 可以实现我想在任意的Emacs窗口随时管理我的 TODO、笔记等，自然的我希望博客也可以在这套体系下，关于这套多提。关于这套多提几句，它主要可以实现我如下模型  在任意的Emacs任意界面随时记录和查看TODO，随意记录后Emacs会自动帮你汇总，这样可以最大限度的降低工作中的打扰 Capture 可以自定义Template，可以满足我在不同场景下预制结构 用Capture和直接自己去编辑各个org文件是非常不同的感受，你永远不用操心写到一半的东西要保存到哪里，如果找到你写了一半的东西   我希望能有更多的控制，并且这些控制能充分利用前人经验，Github Page只是暂时的一个方案，它满足目前需求（毕竟我还没有写博客，我希望自己能定期有至少一次的深入思考），但灵活性就会有所下降，我不希望未来整个网站和Github必须绑死。  如何选取 Org 博客方案 我参考了 Blogs and Wikis with Org 最终选择了 ox-hugo ，主要考虑了如下几点：\n 有丰富主题可供选择，我希望找一个简单的但是还算是有过设计的主题 使用的人要多，而且仍要在维护，这样踩坑就少 文档丰富，使用起来简单  基于以上几点过滤完，其实剩下的考虑就是在 Jekyll 和 Hugo 间了，因为以前听说过Hugo，所以就随意选择了Hugo方向了。通过尝试原生 org 感觉起来支持度不能满足我需求，并且没有如何天然配合Capture使用，所以 ox-hugo 就成了最终方案。当然，事实证明 ox-hugo 就恰恰是我想要的\n如何搭建起整个博客   在Spacemacs中添加 org layer，并且启用 org-enable-hugo-support 之后重启Spacemacs\n(defun dotspacemacs/layers () (setq-default dotspacemacs-configuration-layers \u0026#39;( (org :variables org-enable-github-support t ) ) ) )   安装 Hugo，已Mac为例\nbrew install hugo   使用Hugo创建博客地址，假设创建在 ~/blog 目录下\nhugo new site blog   [可选] 根据上一步命令行输出可以配置 Theme 等信息\n  为 Org Capture 增加 Blog 模板\n  ox-hugo 默认支持2中模式 One post per Org subtree 和 One post per Org file ，我选择了 One post per Org subtree 这样我的配置不需要各个文件都去配置，并且这样配置的 Capture 模板更简单些。Org本身的Subtree设计能够让我专注在某一篇文章中，并且暂时我的文章数肯定不会多到在同一个文件中出现什么性能问题，所以这个模式目前是合理的。\n  我的 org 目录在 ~/org 下，我希望 blog 的 Org 文件和其他任务、笔记等隔离，创建了 ~/org/blog.org 文件来专门做博客，添加如下开头\n#+HUGO_BASE_DIR: ~/blog #+HUGO_SECTION: posts   为Captrue增加Blog模板\n(defun dotspacemacs/user-config () (with-eval-after-load \u0026#39;org-capture (defun org-hugo-new-subtree-post-capture-template () \u0026#34;Returns `org-capture\u0026#39;template string for new Hugo post. See `org-capture-templates\u0026#39;for more information.\u0026#34; (let* ((title (read-from-minibuffer \u0026#34;Title: \u0026#34;)) ;Prompt to enter the post title (fname (org-hugo-slug title))) (mapconcat #\u0026#39;identity `( ,(concat \u0026#34;* TODO \u0026#34; title) \u0026#34;:PROPERTIES:\u0026#34; ,(concat \u0026#34;:EXPORT_FILE_NAME: \u0026#34; fname) \u0026#34;:END:\u0026#34; \u0026#34;%?\\n\u0026#34;) ;Place the cursor here finally \u0026#34;\\n\u0026#34;))) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;b\u0026#34; ;`org-capture\u0026#39; binding + h \u0026#34;Blog\u0026#34; entry ;; It is assumed that below file is present in `org-directory\u0026#39; ;; and that it has a \u0026#34;Blog Ideas\u0026#34; heading. It can even be a ;; symlink pointing to the actual location of notes.org! (file \u0026#34;blog.org\u0026#34;) (function org-hugo-new-subtree-post-capture-template))) ) )     尝试使用 Org Capture 写一篇文章，最终有一篇文章的Org文件内容如下\n#+HUGO_BASE_DIR: ~/blog #+HUGO_SECTION: posts ​* TODO Test :PROPERTIES: :EXPORT_FILE_NAME: test :EXPORT_HUGO_BUNDLE: org :EXPORT_HUGO_TAGS: test :EXPORT_HUGO_CATEGORIES: org :END: ** 二级标题 里面有一些propertie的意思如下\n #+HUGO_BASE_DIR 这个是对所有文章都生效的配置，指出 blog 这个 Hugo 项目的Path EXPORT_FILE_NAME 这个是文章mardown的文件名 EXPORT_HUGO_BUNDLE 这个是文章所在的子目录，我希望不同 CATEGORIE 的文章可以按子目录划分 EXPORT_HUGO_TAGS 文章标签，可以支持多个 EXPORT_HUGO_CATEGORIES 文章类型，也支持多个，但是我希望一个文章属于一个类型，有多个标签  上面的配置实际效果将是导出的 markdown 将存储在 ~/blog/content/posts/org/test.md 上，最终文章的URL将是 {HUGO_HOST}/posts/org/test\n  写作完成后要把 Test 处的 TODO ，通过 C-c C-c 标记为 DONE ，否则会认为这个文章为 草稿 状态，Hugo 不显示\n  在 Org 文件中 Test 文章 SubTree 执行导出 , e e H H\n  进入 blog 目录，执行 hugo server 就可以看到效果了\n  进行到上述步骤 Org 和 Hugo之间的交互就通了，下面讲展示如何使用 GitHub Pages 显示 Hugo 编译出的内容，参考的是 Hugo Host on Github\n  在Github 创建 你用户名的 repository，已我自己举例，我创建了一个 xuxiangyang.github.io 的项目，这个项目需要是Public（否则开通Page需要额外付费）\n  进入Blog项目，添加 .github/workflows/gh-pages.yml 文件，用Github Action 自动生成博客\nname: github pages on: push: branches: ​ - main  # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: ​ - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public   为 Blog 项目添加Git托管\ngit init git add . git commit -m \u0026#39;commit with first test post\u0026#39; git branch -M main git remote add origin git@github.com:xuxiangyang/test.git git push -u origin main   在Github看这个项目的Actions，等待Action运行成功，这个Action的原理是利用 main 分支的 Hugo 源码，编译成HTML静态文件，合并到=gh-pages=分支\n  在Github上 Settings -\u0026gt; Pages，修改 Source Branch为 gh-pages\n  等待一段时间应该就可以了\n    ","permalink":"https://blog.xuxiangyang.com/posts/org/ox-hugo/","summary":"为什么使用Org而不直接使用Github Pages Markdown  我是Emacs用户，使用Spacemacs，日常开发工作主要使用这个工具，并且Spacemacs对于Org支持度很好 Org 基本语法表达能力不弱于标准 Markdown。 Org Capture + Agenda Views 可以实现我想在任意的Emacs窗口随时管理我的 TODO、笔记等，自然的我希望博客也可以在这套体系下，关于这套多提。关于这套多提几句，它主要可以实现我如下模型  在任意的Emacs任意界面随时记录和查看TODO，随意记录后Emacs会自动帮你汇总，这样可以最大限度的降低工作中的打扰 Capture 可以自定义Template，可以满足我在不同场景下预制结构 用Capture和直接自己去编辑各个org文件是非常不同的感受，你永远不用操心写到一半的东西要保存到哪里，如果找到你写了一半的东西   我希望能有更多的控制，并且这些控制能充分利用前人经验，Github Page只是暂时的一个方案，它满足目前需求（毕竟我还没有写博客，我希望自己能定期有至少一次的深入思考），但灵活性就会有所下降，我不希望未来整个网站和Github必须绑死。  如何选取 Org 博客方案 我参考了 Blogs and Wikis with Org 最终选择了 ox-hugo ，主要考虑了如下几点：\n 有丰富主题可供选择，我希望找一个简单的但是还算是有过设计的主题 使用的人要多，而且仍要在维护，这样踩坑就少 文档丰富，使用起来简单  基于以上几点过滤完，其实剩下的考虑就是在 Jekyll 和 Hugo 间了，因为以前听说过Hugo，所以就随意选择了Hugo方向了。通过尝试原生 org 感觉起来支持度不能满足我需求，并且没有如何天然配合Capture使用，所以 ox-hugo 就成了最终方案。当然，事实证明 ox-hugo 就恰恰是我想要的\n如何搭建起整个博客   在Spacemacs中添加 org layer，并且启用 org-enable-hugo-support 之后重启Spacemacs\n(defun dotspacemacs/layers () (setq-default dotspacemacs-configuration-layers \u0026#39;( (org :variables org-enable-github-support t ) ) ) )   安装 Hugo，已Mac为例","title":"使用Org写博客"}]