<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on XXY</title>
    <link>https://blog.xuxiangyang.com/posts/</link>
    <description>Recent content in Posts on XXY</description>
    <image>
      <url>https://blog.xuxiangyang.com/static/images/logo.png</url>
      <link>https://blog.xuxiangyang.com/static/images/logo.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Aug 2021 14:39:00 +0800</lastBuildDate><atom:link href="https://blog.xuxiangyang.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何用RaspberryPI控制Arduino</title>
      <link>https://blog.xuxiangyang.com/posts/diy/%E5%A6%82%E4%BD%95%E7%94%A8raspberrypi%E6%8E%A7%E5%88%B6arduino/</link>
      <pubDate>Sat, 14 Aug 2021 14:39:00 +0800</pubDate>
      
      <guid>https://blog.xuxiangyang.com/posts/diy/%E5%A6%82%E4%BD%95%E7%94%A8raspberrypi%E6%8E%A7%E5%88%B6arduino/</guid>
      <description>方案整体思路 我希望能够通过Arduino来接收感应器和控制舵机等，RaspberryPI来控制网络业务等复杂交互逻辑。Arduino就像一个超级设备，对上层业务隐藏硬件控制细节。所以 Arduino会通过USB链接到RaspberryPI，由RaspberryPI负责Arduino供电。RaspberryPI部分使用Python来做业务代码，通过Serial于Arduino交互。
环境安装   安装Arduino IDE环境
sudo apt-get install arduino   允许 pi 访问USB和串口，这里假设你的账户名称为 pi
sudo usermod -a -G dialout pi   使用Python3环境安装pySerial库
python3 -m pip install pyserial   从Arduino读取数据 我们需要编写2个设备上的代码
  编写Arduino代码
void setup() { Serial.begin(9600); } void loop() { Serial.println(&amp;#34;Hello&amp;#34;); delay(1000); }   点击Arduino IDE UpLoad，通过 Serial Monitor 应该可以看到 Hello 的输出
  编写Python代码
import serial if __name__ == &amp;#39;__main__&amp;#39;: ser = serial.</description>
    </item>
    
    <item>
      <title>使用Org写博客</title>
      <link>https://blog.xuxiangyang.com/posts/org/ox-hugo/</link>
      <pubDate>Tue, 10 Aug 2021 19:24:00 +0800</pubDate>
      
      <guid>https://blog.xuxiangyang.com/posts/org/ox-hugo/</guid>
      <description>为什么使用Org而不直接使用Github Pages Markdown  我是Emacs用户，使用Spacemacs，日常开发工作主要使用这个工具，并且Spacemacs对于Org支持度很好 Org 基本语法表达能力不弱于标准 Markdown。 Org Capture + Agenda Views 可以实现我想在任意的Emacs窗口随时管理我的 TODO、笔记等，自然的我希望博客也可以在这套体系下，关于这套多提。关于这套多提几句，它主要可以实现我如下模型  在任意的Emacs任意界面随时记录和查看TODO，随意记录后Emacs会自动帮你汇总，这样可以最大限度的降低工作中的打扰 Capture 可以自定义Template，可以满足我在不同场景下预制结构 用Capture和直接自己去编辑各个org文件是非常不同的感受，你永远不用操心写到一半的东西要保存到哪里，如果找到你写了一半的东西   我希望能有更多的控制，并且这些控制能充分利用前人经验，Github Page只是暂时的一个方案，它满足目前需求（毕竟我还没有写博客，我希望自己能定期有至少一次的深入思考），但灵活性就会有所下降，我不希望未来整个网站和Github必须绑死。  如何选取 Org 博客方案 我参考了 Blogs and Wikis with Org 最终选择了 ox-hugo ，主要考虑了如下几点：
 有丰富主题可供选择，我希望找一个简单的但是还算是有过设计的主题 使用的人要多，而且仍要在维护，这样踩坑就少 文档丰富，使用起来简单  基于以上几点过滤完，其实剩下的考虑就是在 Jekyll 和 Hugo 间了，因为以前听说过Hugo，所以就随意选择了Hugo方向了。通过尝试原生 org 感觉起来支持度不能满足我需求，并且没有如何天然配合Capture使用，所以 ox-hugo 就成了最终方案。当然，事实证明 ox-hugo 就恰恰是我想要的
如何搭建起整个博客   在Spacemacs中添加 org layer，并且启用 org-enable-hugo-support 之后重启Spacemacs
(defun dotspacemacs/layers () (setq-default dotspacemacs-configuration-layers &amp;#39;( (org :variables org-enable-github-support t ) ) ) )   安装 Hugo，已Mac为例</description>
    </item>
    
  </channel>
</rss>
